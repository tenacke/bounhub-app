version: "3.8"
services:
  db:
    image: postgres:alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: ./backend/db.env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    networks:
      - app_network

  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command:
      - sh
      - -c
      - "python manage.py collectstatic --noinput && python manage.py migrate && gunicorn core.wsgi --bind 0.0.0.0:8000 --workers 4 --reload"
    env_file: ./backend/api.env
    environment:
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    networks:
      - app_network

  web:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file: ./frontend/web.env
    volumes:
      - ./frontend:/app
    ports:
      - "80:80"
    depends_on:
      - api
    restart: on-failure
    networks:
      - app_network

  nginx:
    image: nginx:alpine
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # Mount your Nginx config
      - ./frontend/dist:/usr/share/nginx/html # React build output
      - ./backend/static:/app/static # Django static files
      - ./backend/media:/app/media # Django media files
    ports:
      - "8080:80"
    depends_on:
      - web
      - api
    restart: on-failure
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
