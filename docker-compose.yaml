version: "3.8"
services:
  db:
    image: postgres:17.4-alpine3.21
    container_name: postgres
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: ./backend/db.env
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: on-failure
    networks:
      - app_network

  api:
    build:
      context: ./backend
    volumes:
      - django_static:/app/staticfiles
    env_file: ./backend/api.env
    environment:
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      SECRET_KEY: ${SECRET_KEY}
      EMAIL_HOST_USER: ${EMAIL_HOST_USER}
      EMAIL_HOST_PASSWORD: ${EMAIL_HOST_PASSWORD}
      DEFAULT_FROM_EMAIL: ${DEFAULT_FROM_EMAIL}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    restart: on-failure
    networks:
      - app_network

  web:
    build:
      context: ./frontend
    volumes:
      - react_build:/app/dist
    env_file: ./frontend/web.env
    depends_on:
      - api
    restart: on-failure
    networks:
      - app_network

  nginx:
    image: nginx:1.27.4-alpine3.21-slim
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf # Mount your Nginx config
      - react_build:/usr/share/nginx/html # React build output
      - django_static:/app/staticfiles # Django static files
      - ./cert.pem:/etc/nginx/certificates/cert.pem # SSL certificate
      - ./key.pem:/etc/nginx/certificates/key.pem # SSL key
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - web
      - api
    restart: on-failure
    networks:
      - app_network

networks:
  app_network:
    driver: bridge

volumes:
  postgres_data:
  react_build:
  django_static:
